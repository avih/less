# mingw makefile to build "less" v322 or later. Based on Makefile.wng at v661.
# That's three-ish decades of code, since win95, with one makefile.
#
# v537+ builds with unmodified sources. pre-v537 uses auto-applied backports.
#
# Note that some revisions don't build due to temporary build breakage.
#
# Requires gnu make, mingw cc, few posix utils (grep, sed, awk, sh, etc).
# On windows, busybox-w32 and mingw compiler are enough (e.g. w64devkit).
# For pre-v537, git is also required (with valid user configured).
#
# To use:
# - Copy this file outside the source tree, e.g. to ../mingw.mak
# - git checkout v550  (or any other revision since v322)
# - make -f ../mingw.mak  [CC=<mingw-cc> SHELL=sh  (when cross-compling)]
# - XCFLAGS=... and/or XLDFLAGS=... are appended if provided.
# - with clang, add: XCFLAGS="-std=c89 -Wno-deprecated-non-prototype"
#
# For revisions before v537, one or more backport git commits are added.
# The backports can be removed using "make <this-file> bpclean". This is 100%
# no-op in v537 or later. Before v537 it does "git reset --hard XXX" where XXX
# is the commit before the backports were committed (or staged, see below).

# The backport commits are not an issue normally, and git will garbage-collect
# them over time (assuming detached HEAD), but they will confuse git-bisect,
# so after testing, use "bpclean" before reporting "git bisect good/bad".
#
# Adding BPCOMMIT=NO (git-)stages the backports but without committing them.
# This still requires "bpclean" before "git bisect good/bad", but it's nicer
# with git-prompt.sh because it doesn't change the git HEAD hash. However,
# it requires "bpclean" also before changing branch/revision/etc.

# So with revisions before v537, if doing any work other than building, ensure
# you have backup - both adding the backports and "bpclean" overwrite files.
# In v537+ there are no backports, and "make ... bpclean" is 100% no-op.
#
# Incremental/parallel [re-]builds work as expected regardless of BPCOMMIT=NO.
#
# This makefile adapts to several changes at the source files over the years,
# such as new/renamed files, and updated funcs.h procedure around v618, v490.
#
# It also uses embedded posix mkhelp/mkfuncs fallbacks, if perl is missing.
#
# 64 bit build before v553 succeeds, but crash with filenames - "less file",
# due to 32 bit HANDLE instead of 64. But redirection works - "less < file",
# and 32-bit builds don't have this issue.
#
# mingw support was added in v537. Before that, the essence of v537 is added
# as git commit "tmp-backport-v537". That may or may not be the full possible
# functionality, as the main effort was building rather than testing.
#
# For [v333..v511) a subset of f0f0eda is committed as "tmp-backport-v511". It
# patches error("...") -> error("...",0) at screen.c. The issue existed since
# that line was added (d23b8390, v333), as error(...) at output.c always took
# 2 args since it was added at the initial commit v243, and it became visible
# at v490 which switched to ANSI-C prototypes - with mismatched num of args.
#
# Earlier revisions require few more small fixups, and it builds down to v322.
# v322 (1996) is the first version which supports msvc (only borland prior),
# probably targeting win95 or so, and it builds+works with this makefile too.
#
# Earlier than v322 might be possible by backporting 592f651, some other day.
#
# This builds all the official releases v322..v661, and then some:
#
#  for v in \
#      v661 v643 v633 v632 v608 v590 v581.2    v581 v563 v551 v550 v537 \
#      v530 v512 v500 v490 v487 v481 v458 v451 v444 v443 v436 v420 v418 \
#      v416 v415 v409 v408 v406 v405 v394 v382 v380 v378 v376 v367 v358 \
#      v354 v353 v346 v340 v337 v335 v334 v332 v330 v329 v328 v326 v322
#  do
#      git clean -xf &&
#      git checkout $v &&
#      make -f ../mingw.mak -j8 &&
#      cp less.exe ../less.mingw.$v.exe &&
#      >&2 echo "OK-OK-OK: $v" || break
#  done >/dev/null
#
# ------- modified Makefile.wng starts below -------


# Makefile for less using mingw-w64 package:
#   http://mingw-w64.org/doku.php
#
# Derived from Makefile.wnm
#
# Usage: mingw32-make -f Makefile.wng [REGEX_PACKAGE={posix|gnu|regcomp-local}]
#
# When cross compiling, add also: SHELL=sh CC=<mingw-cc>
#
# The optional command line parameter "REGEX_PACKAGE" is used to specify 
# a regular expression package for compilation and linking.  This parameter
# can assume one of three values.  
#
# REGEX_PACKAGE == regcomp-local
#   This choice selects the regular expression package written by Henry
#   Spencer.  It is implemented by the repository file "regexp.c".  
#
# REGEX_PACKAGE == posix
#   This choice selects the POSIX implementation and is provided by MingW.  
#   This is the default choice.  
#
# REGEX_PACKAGE == gnu
#   This choice selects the GNU implementation and is provided by MingW.  
#
# REGEX_PACKAGE == none
#   This choice disables regex, and instead uses smart plain text search.
#
# By default, the files help.c and funcs.h are generated using few posix
# utilities (grep, sed, etc). On Windows, if the tools are missing, add:
#   WINGEN=1
# to compile a native C program which will be used instead of the posix tools.
# NOTE: to cross compile with WINGEN=1, e.g. to arm, first run with native CC:
#   make -f Makefile.wng CC=gcc buildgen.exe
# and then compile `less` with the arm CC:
#   make -f Makefile.wng WINGEN=1 CC=armv7...

#### Start of system configuration section. ####

CC = gcc

# Definitions specific to mingw
#
MINGW_DEFINES     = -DMINGW -DWIN32

# This specifies the "root" directory of the MingW installation.  
# It is defined so that the compiler and linker can find the header files
# and library that provide regular expression support.  
#
MINGW_ROOT_PATH = /mingw-w64/mingw64

# Determine the regular expression package to be used.  
#
REGEX_PACKAGE ?= regcomp-local
ifeq (${REGEX_PACKAGE},regcomp-local)
    MINGW_DEFINES += -DUSE_REGEXP_C
else ifeq (${REGEX_PACKAGE},posix)
    MINGW_DEFINES += -DUSE_POSIX_REGCOMP
else ifeq (${REGEX_PACKAGE},gnu)
    MINGW_DEFINES += -DUSE_GNU_REGEX
else ifeq (${REGEX_PACKAGE},none)
#    without specific regex package, defines.wn sets NO_REGEX=1
else
    $(error REGEX_PACKAGE must be posix, gnu, regcomp-local or none)
endif

MINGW_REGEX_IPATH = -I${MINGW_ROOT_PATH}/opt/include
MINGW_REGEX_LPATH = -L${MINGW_ROOT_PATH}/opt/lib
MINGW_REGEX_LIB   = -lregex

CFLAGS_MINGW = ${MINGW_DEFINES}
ifneq  (${REGEX_PACKAGE},regcomp-local)
CFLAGS_MINGW += ${MINGW_REGEX_IPATH}
endif

# MingW may use sh.exe instead of cmd.exe.
# Default to cmd.exe, but allow sh.exe too, e.g. for cross compile.
#
SHELL = cmd.exe
ifeq  (${SHELL},cmd.exe)
    CP = copy >NUL
    MV = move
    RM = del
    DIFF = comp /M >NUL  # using exit status - not output
    DEVNULL = NUL
else
    CP = cp
    MV = mv
    RM = rm
    DIFF = diff
    DEVNULL = /dev/null
endif

CFLAGS  = -O2 ${CFLAGS_MINGW}
ifneq  (${REGEX_PACKAGE},none)
ifneq  (${REGEX_PACKAGE},regcomp-local)
LDFLAGS = ${MINGW_REGEX_LPATH}
LIBS    = ${MINGW_REGEX_LIB}
endif
endif

LIBS += -lshell32

CFLAGS += ${XCFLAGS}
LDFLAGS += ${XLDFLAGS}

#### End of system configuration section. ####

# adapt to new or renamed files over the years
ifneq (,$(wildcard evar.c))
    EVARC = evar.c
    EVARO = evar.o
endif
ifneq (,$(wildcard xbuf.c))
    XBUFC = xbuf.c
    XBUFO = xbuf.o
endif
ifneq (,$(wildcard lesskey_parse.c))
    LESSKEY_PARSEO = lesskey_parse.o
endif
ifneq (,$(wildcard cvt.c))
    CVTC = cvt.c
    CVTO = cvt.o
endif
ifneq (,$(wildcard pattern.c))
    PATTERNC = pattern.c
    PATTERNO = pattern.o
endif
ifneq (,$(wildcard less.hlp))
    HELPSRC = less.hlp  # since v554
else
    HELPSRC = less.hlp.VER  # added at v339 but used also before that
endif
ifneq (,$(wildcard lessecho.c))  # doesn't exist before v323
    LESSECHOEXE = lessecho.exe
endif


# This rule allows us to supply the necessary -D options
# in addition to whatever the user asks for.
.c.o:
	${CC} -c -I. ${CFLAGS} $<

LESS_SRC = brac.c ch.c charset.c cmdbuf.c command.c		\
           ${CVTC} decode.c edit.c ${EVARC} filename.c forwback.c 		\
           ifile.c input.c jump.c line.c linenum.c 		\
           lsystem.c main.c mark.c optfunc.c option.c 		\
	   opttbl.c os.c output.c ${PATTERNC} position.c 		\
	   prompt.c          screen.c           search.c 	\
	   signal.c tags.c ttyin.c version.c ${XBUFC}
ifeq  (${REGEX_PACKAGE},regcomp-local)
LESS_SRC += regexp.c
endif

OBJ = \
	main.o screen.o brac.o ch.o charset.o cmdbuf.o \
	command.o ${CVTO} decode.o edit.o ${EVARO} filename.o forwback.o \
	help.o ifile.o input.o jump.o ${LESSKEY_PARSEO} line.o linenum.o \
	lsystem.o mark.o optfunc.o option.o opttbl.o os.o \
	output.o ${PATTERNO} position.o prompt.o search.o signal.o \
	tags.o ttyin.o version.o ${XBUFO}
ifeq  (${REGEX_PACKAGE},regcomp-local)
OBJ += regexp.o
endif

all: less.exe lesskey.exe ${LESSECHOEXE}

less.exe: ${OBJ}
	${CC} ${LDFLAGS} -o $@ ${OBJ} ${LIBS}

lesskey.exe: lesskey.o ${LESSKEY_PARSEO} version.o ${XBUFO}
	${CC} ${LDFLAGS} -o $@ lesskey.o ${LESSKEY_PARSEO} version.o ${XBUFO}

lessecho.exe: lessecho.o version.o
	${CC} ${LDFLAGS} -o $@ lessecho.o version.o

defines.h: defines.wn
	${CP} $< $@

ifneq (,$(findstring clean,${MAKECMDGOALS}))
    # avoid backports/fixups checks if it's a cleanup run.
    # consequently, don't clean with bin targets, e.g. "make clean less.exe"
    CLEANUP_RUN = YES
endif


GITLOG = git log --pretty=oneline
PRE_BP = ${GITLOG} | grep -v tmp-backport | head -n 1 | sed "s/\s.*//"
bpclean:
  ifneq (,$(wildcard Makefile.wng))
	@echo no backports at v537 or later
  else
	git reset --hard $(shell ${PRE_BP})
  endif

ifeq  (${WINGEN},1)  # only works at 76a7805e (~ v618) or later ("new" MKFUNCS)
    BUILDGEN = buildgen.exe
    MKHELP = buildgen.exe help
    MKFUNCS = type 2>NUL ${LESS_SRC} | buildgen.exe funcs

else ifeq (,${CLEANUP_RUN})  # ifeq not needed, but faster
    MKSELF = ${MAKEFILE_LIST}  # this file in gnu make (no need for lastword)
    $(shell grep "^\#mkhelp " < ${MKSELF} | sed "s/^\#mkhelp //" > mkhelp.tmp)

    MKHELP = (perl mkhelp.pl || sh mkhelp.sh || sh mkhelp.tmp)
    MKFUNCS = grep -h "^public [^;]*$$" ${LESS_SRC} | sed "s/$$/;/"  # v618+

    # adapt to funcs.h changes over the years, and maybe backports
    OLD_MKFUNCS = $(shell grep -q "^public.*(.*)\s*$$" ${LESS_SRC} || echo YES)
    ifeq (YES,${OLD_MKFUNCS})  # pre 76a7805e (~ v618)
        $(shell grep "^\#mkfuncs " < ${MKSELF} | sed "s/^\#mkfuncs //" > mkfuncs.tmp)
        MKFUNCS = cat ${LESS_SRC} | (perl mkfuncs.pl || sh mkfuncs.tmp)  # v490+

        ifeq (,$(wildcard Makefile.wng))  # missing mingw makefile - pre v537
            ifeq (,$(shell ${GITLOG} | grep "^ceda5a2"))  # pre ~ v490
                export NOARGS =  # for mkfuncs.tmp, but mkfuncs.awk is faster
                MKFUNCS = cat ${LESS_SRC} | (awk -f mkfuncs.awk || sh mkfuncs.tmp)
            endif

            CFLAGS += -DHAVE_SYS_STAT_H=1  # pre v328
            CFLAGS += -DSTDC_HEADERS=1  # pre v353

            # CMD_HISTORY fixup v382
            ifeq (,$(shell git diff v382 cmdbuf.c))
                CFLAGS += -DHISTFILE_FIRST_LINE=\".less-history-file:\" \
                          -DHISTFILE_SEARCH_SECTION=\".search\" \
                          -DHISTFILE_SHELL_SECTION=\".shell\"
            endif

            # glob.h is not at the sources before v537, and is added last, so
            # if it exists - backports were applied, and no need to re-apply.
            # also, avoids touching files which would trigger rebuild.
            ifeq (,$(wildcard glob.h))
                GITAPPLY = git apply -q --ignore-whitespace  # ignore CR @EOL
                GITDIFF = git diff --exit-code > ${DEVNULL}
                GITCOMMIT = git commit -uno -m tmp-backport
                ifeq (${BPCOMMIT},NO)
                    GITCOMMIT = echo staged backport
                endif

                # use the msvc codepaths with mingw, else borland is assumed
                $(shell grep "^\#msvcfile " < ${MKSELF} | sed "s/^\#msvcfile //" | ${GITAPPLY})
                $(info $(shell ${GITDIFF} filename.c || (git add filename.c && ${GITCOMMIT}-v327)))

                # HAVE_SHELL fixup
                ifeq (,$(shell git diff 1ae9ccb4 filename.c))
                    $(shell git cherry-pick -n 39dcea79 >${DEVNULL})
                    $(info $(shell ${GITCOMMIT}-v331))
                endif

                # less.hlp.VER used but added at v339 (less.hlp is from v554)
                ifeq (,$(wildcard less.hlp.VER))
                    $(shell git checkout v339 less.hlp.VER)
                    $(info $(shell ${GITCOMMIT}-v339))
                endif

                # fixup multiple def less_is_more
                ifneq (,$(shell grep "^public\s*int\s*less_is_more" main.c))
                    $(shell git cherry-pick -n 42f5e871 >${DEVNULL})
                    $(info $(shell ${GITCOMMIT}-v438))
                endif

                # screen.c: error("...") -> error("...", NULL)
                $(shell grep "^\#errdiff " < ${MKSELF} | sed "s/^\#errdiff //" | ${GITAPPLY})
                $(info $(shell ${GITDIFF} screen.c || (git add screen.c && ${GITCOMMIT}-v511)))

                PATCH_POPEN_WARN = $(shell \
                    sed "s/.*FILE.*popen.*//" <$(1) >f.tmp && \
                    $(MV) f.tmp $(1) >$(DEVNULL) && \
                    git add $(1) \
                )
                # mingw support. copying 3 files from v537 (not patching)
                $(shell git checkout v537 lglob.h lsystem.c defines.wn)
                $(call PATCH_POPEN_WARN,lsystem.c)  # some pre-537
                $(call PATCH_POPEN_WARN,filename.c) # rest of pre-537
                $(shell ${CP} lglob.h glob.h && git add glob.h)  # ~ v327
                $(info $(shell ${GITCOMMIT}-v537))
            endif  # backports applied
        endif  # pre v537
    endif  # OLD_MKFUNCS - pre ~ v618
endif

# in [v617..v630) init_poll is used but noop, and unresolved. define if as noop
ifeq (,${CLEANUP_RUN})
    ifeq (,$(shell ${GITLOG} | grep "^3b56da0f"))  # pre 630
        ifneq (,$(shell ${GITLOG} | grep "^fe1526f2"))  # pre 617
            MKFUNCS += | sed "s/.*init_poll.*/\#define init_poll()/"
        endif
    endif
endif


funcs.h: ${LESS_SRC} ${BUILDGEN}
	-${CP} funcs.h funcs.h.old
	${MKFUNCS} >funcs.h.tmp
	${DIFF} funcs.h.tmp funcs.h || ${MV} funcs.h.tmp funcs.h

help.c: ${HELPSRC} ${BUILDGEN}
	${MKHELP}  < ${HELPSRC} > $@

buildgen.exe: buildgen.c
	${CC} $< -o $@

${OBJ} lessecho.o lesskey.o: less.h defines.h funcs.h

TAGS:
	etags *.c *.h

clean:
	-${RM} *.o *.exe defines.h funcs.h help.c TAGS


.PHONEY: all clean bpclean


# embedded posix sh scripts mkhelp.tmp and mkfuncs.tmp. fallbacks for perl

#mkhelp echo "/* Generated by $0 from less.hlp[.VER] at $(LC_ALL=C date -u) */"
#mkhelp echo '#include "less.h"'
#mkhelp echo 'constant char helpdata[] = {'
#mkhelp 
#mkhelp     tr -d \\r |      # no CR's at the file except maybe at EOL
#mkhelp     od -b -v -A n |  # octal values, typically 16 per line
#mkhelp     awk '{ for(i=1; i<=NF; i++) printf("0%s,", $i); print "" }'
#mkhelp 
#mkhelp echo '0 };'
#mkhelp echo 'constant int size_helpdata = sizeof(helpdata) - 1;'

#mkfuncs # 1-2s in busybox-w32 sh (vs nearly instant with perl).
#mkfuncs >&2 printf %s "$0 ... "
#mkfuncs TAB=$(printf \\t) state=0 params=
#mkfuncs while IFS= read -r line; do
#mkfuncs    case $state in
#mkfuncs    0)  case $line in "${TAB}public"*) state=1 buf=${line#?}; esac;;
#mkfuncs    1)  case $line in *"("*) state=2 buf="$buf ${line%%(*}"; esac;;
#mkfuncs    2)  case $line in
#mkfuncs        *";")   line=${line#"$TAB"}
#mkfuncs                params=$params${params:+, }${line%?}
#mkfuncs                ;;
#mkfuncs      # mkfuncs.pl uses the macro wrappers, but the names changed,
#mkfuncs      # and no-macros is more portable (NOARGS is the same-ish thing)
#mkfuncs      # "{"*)   echo "$buf LESSPARAMS ((${params:-VOID_PARAM}));"
#mkfuncs        "{"*)   echo "$buf (${NOARGS-${params:-void}});"
#mkfuncs                state=0 params=
#mkfuncs        esac
#mkfuncs    esac
#mkfuncs done
#mkfuncs >&2 echo "done"


# minimal subset of f0f0eda (v511)

#errdiff diff --git a/screen.c b/screen.c
#errdiff index c329c7a..5bc5bd5 100644
#errdiff --- a/screen.c
#errdiff +++ b/screen.c
#errdiff @@ -128,7 +128,7 @@ static void win32_deinit_term();
#errdiff  #define	MAKEATTR(fg,bg)		((WORD)((fg)|((bg)<<4)))
#errdiff  #define	SETCOLORS(fg,bg)	{ curr_attr = MAKEATTR(fg,bg); \
#errdiff  				if (SetConsoleTextAttribute(con_out, curr_attr) == 0) \
#errdiff -				error("SETCOLORS failed"); }
#errdiff +				error("SETCOLORS failed",NULL); }
#errdiff  #endif
#errdiff  
#errdiff  #if MSDOS_COMPILER


# required for v326

#msvcfile diff --git a/filename.c b/filename.c
#msvcfile index d0488f6..3aa73df 100644
#msvcfile --- a/filename.c
#msvcfile +++ b/filename.c
#msvcfile @@ -703,7 +703,7 @@ close_altfile(altfilename, filename, pipefd)
#msvcfile  					char ext[_MAX_EXT];	\
#msvcfile  					int handle;
#msvcfile  #else
#msvcfile -#ifdef _MSC_VER
#msvcfile +#if defined(_MSC_VER) || defined(MINGW)
#msvcfile  
#msvcfile  #define	FIND_FIRST(filename,fndp)	_findfirst(filename, fndp)
#msvcfile  #define	FIND_NEXT(handle,fndp)		_findnext(handle, fndp)
